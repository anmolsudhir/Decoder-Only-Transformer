# -*- coding: utf-8 -*-
"""GPT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10HeW4K_EhJyiE2jjHpjjWN64-LRXw2Oj
"""

#!wget https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt
import torch
import torch.nn as nn
from torch.nn import functional as F

torch.manual_seed(1337)

# HYPERPARAMETERS
batch_size = 32
block_size = 8
max_iters = 3000
eval_intervals = 300
learning_rate = 1e-2
device = 'cpu'
eval_iters = 200

# Importing the text dataset
with open('input.txt', 'r') as f:
  text = f.read()

# Getting a sorted list of all the characters present in the dataset
chars = sorted(list(set(text)))
vocab_size = len(chars) # Number of distict characters present in Dataset

# Encoder and Decoder fubctions
stoi = {ch : i for i, ch in enumerate(chars)} # String to Integer encoding
itos = {i : ch for i, ch in enumerate(chars)} # Integer to string decoding
encode = lambda s : [stoi[c] for c in s] # Encode function
decode = lambda l : ''.join([itos[i] for i in l]) # Decode function

# Encoding all the characters present in dataset
data = torch.tensor(encode(text), dtype=torch.long) #Encoded dataset as a tensor

# Splitting Training and Validation data
n = int(0.9*len(data)) # calc 90% of original data
train_data = data[:n] # Training data -> 90%
val_data = data[n:] # Validation data -> 10%

# Loaading data / Getting batchs for training
def get_batch(split):
  data = train_data if split == 'train' else val_data
  ix = torch.randint(len(data) - block_size, (batch_size, )) # Randomly generating batch's starting point
  x = torch.stack([data[i:i+block_size] for i in ix]) # Generating context blocks (list of inputs) from randomly generated batch starting point
  y = torch.stack([data[i+1: i+1+block_size] for i in ix]) # Generating Target for context blocks
  x, y = x.to(device), y.to(device) # Port to selected device
  return x, y

@torch.no_grad() # Instructing PyTorch not to run the below function while backpropogating the nn
# Estimating loss a traing checkpoints
def estimate_loss():
  out = {} # Output dictionary
  m.eval() # Putting the model in evaluation mode
  for split in ['train', 'val']:
    losses = torch.zeros(eval_iters) # Creating tensor of size eval_iter = 200
    for k in range(eval_iters):
      X, Y = get_batch(split) # Getting batches to calculate loss
      logits, loss = m(X, Y) # Calculating prediction (logits) and loss
      losses[k] = loss.item() # Setting loss of kth iteration
    out[split] = losses.mean() # Calculation average loss of training/validation
  m.train() # Putting the model in training mode
  return out

# Creating a Bigram language model class to predict the next token (char)
class BigramLanguageModel(nn.Module):
  def __init__(self):
    super().__init__()
    # creating a simple lookup table by embedding tokens of size vacabXvocab
    self.token_embedding_table = nn.Embedding(vocab_size, vocab_size)

  # Overriding Forward method of nn.Module class
  def forward(self, idx, target=None):
    #idx and target are of dimensions (B, T) -> (Batches, Times(Block_size))
    logits = self.token_embedding_table(idx) #Predicting the next token # Dimensions -> (B, T, C)
                                             # C -> Channel size = vocab_size
    if target == None :
      loss = None # Setting loss = none if there is no target to evaluate from
    else : 
      B, T, C = logits.shape # Getting predictions shape
      logits = logits.view(B*T, C) # Changing dimensions to calculate loss
      target = target.view(B*T) # Changing Dimentions to calculate loss
      loss = F.cross_entropy(logits, target) # Calculating loss function 
    return logits, loss

  # Generating the next token(character)
  def generate(self, idx, max_new_tokens):
    for _ in range(max_new_tokens):
      logits, loss = self(idx) # calling forward method of the model
      logits = logits[:, -1, :] # Taking the next taken -> (B, C)
      probs = F.softmax(logits, dim = 1) # Calculating the probabilities of next token
      idx_next = torch.multinomial(probs, num_samples=1) # -> (B, 1)
      idx = torch.cat((idx, idx_next), dim = 1) # Concatinating idx and idx_next
    return idx

# Creating Bigram model
model = BigramLanguageModel()
m = model.to(device) # Porting model and model variables to device type

# Creating an optimizer object to optimize model
optimizer = torch.optim.AdamW(m.parameters(), lr = learning_rate)

# Training the created model
for iter in range(max_iters):
  # Evaluating average loss at every eval_interval = 300
  if iter%eval_intervals == 0:
    losses = estimate_loss()
    print(f"step {iter} : train loss {losses['train']:.4f}, val loss {losses['val']:.4f}")
  
  # creating random batches of data
  xb, yb = get_batch('train')
  logits, loss = m(xb, yb) # Predicting next token and loss
  optimizer.zero_grad(set_to_none = True)
  loss.backward() # Backpropogating
  optimizer.step() # Optimizing model's parameters

# Creating initial context
context = torch.zeros((1, 1), dtype = torch.long, device = device)

# Generating Next token and decoding it to string/chars
print(decode(m.generate(context, max_new_tokens=1000)[0].tolist()))